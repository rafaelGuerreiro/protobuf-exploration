// This file is generated by rust-protobuf 2.5.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub Id: u32,
    pub Session: ::protobuf::SingularPtrField<super::core::UuidMessage>,
    pub Character: ::protobuf::SingularPtrField<super::core::UuidMessage>,
    // message oneof groups
    pub RequestData: ::std::option::Option<Request_oneof_RequestData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Request_oneof_RequestData {
    Movement(Direction),
    Facing(Direction),
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // uint32 Id = 1;


    pub fn get_Id(&self) -> u32 {
        self.Id
    }
    pub fn clear_Id(&mut self) {
        self.Id = 0;
    }

    // Param is passed by value, moved
    pub fn set_Id(&mut self, v: u32) {
        self.Id = v;
    }

    // .message.core.UuidMessage Session = 2;


    pub fn get_Session(&self) -> &super::core::UuidMessage {
        self.Session.as_ref().unwrap_or_else(|| super::core::UuidMessage::default_instance())
    }
    pub fn clear_Session(&mut self) {
        self.Session.clear();
    }

    pub fn has_Session(&self) -> bool {
        self.Session.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Session(&mut self, v: super::core::UuidMessage) {
        self.Session = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Session(&mut self) -> &mut super::core::UuidMessage {
        if self.Session.is_none() {
            self.Session.set_default();
        }
        self.Session.as_mut().unwrap()
    }

    // Take field
    pub fn take_Session(&mut self) -> super::core::UuidMessage {
        self.Session.take().unwrap_or_else(|| super::core::UuidMessage::new())
    }

    // .message.core.UuidMessage Character = 3;


    pub fn get_Character(&self) -> &super::core::UuidMessage {
        self.Character.as_ref().unwrap_or_else(|| super::core::UuidMessage::default_instance())
    }
    pub fn clear_Character(&mut self) {
        self.Character.clear();
    }

    pub fn has_Character(&self) -> bool {
        self.Character.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Character(&mut self, v: super::core::UuidMessage) {
        self.Character = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Character(&mut self) -> &mut super::core::UuidMessage {
        if self.Character.is_none() {
            self.Character.set_default();
        }
        self.Character.as_mut().unwrap()
    }

    // Take field
    pub fn take_Character(&mut self) -> super::core::UuidMessage {
        self.Character.take().unwrap_or_else(|| super::core::UuidMessage::new())
    }

    // .message.request.Direction Movement = 4;


    pub fn get_Movement(&self) -> Direction {
        match self.RequestData {
            ::std::option::Option::Some(Request_oneof_RequestData::Movement(v)) => v,
            _ => Direction::None,
        }
    }
    pub fn clear_Movement(&mut self) {
        self.RequestData = ::std::option::Option::None;
    }

    pub fn has_Movement(&self) -> bool {
        match self.RequestData {
            ::std::option::Option::Some(Request_oneof_RequestData::Movement(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Movement(&mut self, v: Direction) {
        self.RequestData = ::std::option::Option::Some(Request_oneof_RequestData::Movement(v))
    }

    // .message.request.Direction Facing = 5;


    pub fn get_Facing(&self) -> Direction {
        match self.RequestData {
            ::std::option::Option::Some(Request_oneof_RequestData::Facing(v)) => v,
            _ => Direction::None,
        }
    }
    pub fn clear_Facing(&mut self) {
        self.RequestData = ::std::option::Option::None;
    }

    pub fn has_Facing(&self) -> bool {
        match self.RequestData {
            ::std::option::Option::Some(Request_oneof_RequestData::Facing(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Facing(&mut self, v: Direction) {
        self.RequestData = ::std::option::Option::Some(Request_oneof_RequestData::Facing(v))
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        for v in &self.Session {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.Character {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.Id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Session)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Character)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.RequestData = ::std::option::Option::Some(Request_oneof_RequestData::Movement(is.read_enum()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.RequestData = ::std::option::Option::Some(Request_oneof_RequestData::Facing(is.read_enum()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.Id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.Id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.Session.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.Character.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.RequestData {
            match v {
                &Request_oneof_RequestData::Movement(v) => {
                    my_size += ::protobuf::rt::enum_size(4, v);
                },
                &Request_oneof_RequestData::Facing(v) => {
                    my_size += ::protobuf::rt::enum_size(5, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.Id != 0 {
            os.write_uint32(1, self.Id)?;
        }
        if let Some(ref v) = self.Session.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.Character.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.RequestData {
            match v {
                &Request_oneof_RequestData::Movement(v) => {
                    os.write_enum(4, v.value())?;
                },
                &Request_oneof_RequestData::Facing(v) => {
                    os.write_enum(5, v.value())?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "Id",
                    |m: &Request| { &m.Id },
                    |m: &mut Request| { &mut m.Id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::UuidMessage>>(
                    "Session",
                    |m: &Request| { &m.Session },
                    |m: &mut Request| { &mut m.Session },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::core::UuidMessage>>(
                    "Character",
                    |m: &Request| { &m.Character },
                    |m: &mut Request| { &mut m.Character },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, Direction>(
                    "Movement",
                    Request::has_Movement,
                    Request::get_Movement,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, Direction>(
                    "Facing",
                    Request::has_Facing,
                    Request::get_Facing,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Request>(
                    "Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Request {
        static mut instance: ::protobuf::lazy::Lazy<Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Request,
        };
        unsafe {
            instance.get(Request::new)
        }
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.Id = 0;
        self.Session.clear();
        self.Character.clear();
        self.RequestData = ::std::option::Option::None;
        self.RequestData = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Direction {
    None = 0,
    North = 1,
    NorthEast = 3,
    East = 2,
    SouthEast = 6,
    South = 4,
    SouthWest = 12,
    West = 8,
    NorthWest = 9,
}

impl ::protobuf::ProtobufEnum for Direction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Direction> {
        match value {
            0 => ::std::option::Option::Some(Direction::None),
            1 => ::std::option::Option::Some(Direction::North),
            3 => ::std::option::Option::Some(Direction::NorthEast),
            2 => ::std::option::Option::Some(Direction::East),
            6 => ::std::option::Option::Some(Direction::SouthEast),
            4 => ::std::option::Option::Some(Direction::South),
            12 => ::std::option::Option::Some(Direction::SouthWest),
            8 => ::std::option::Option::Some(Direction::West),
            9 => ::std::option::Option::Some(Direction::NorthWest),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Direction] = &[
            Direction::None,
            Direction::North,
            Direction::NorthEast,
            Direction::East,
            Direction::SouthEast,
            Direction::South,
            Direction::SouthWest,
            Direction::West,
            Direction::NorthWest,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Direction", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Direction {
}

impl ::std::default::Default for Direction {
    fn default() -> Self {
        Direction::None
    }
}

impl ::protobuf::reflect::ProtobufValue for Direction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15message/request.proto\x12\x0fmessage.request\x1a\x12message/core.p\
    roto\"\x86\x02\n\x07Request\x12\x0e\n\x02Id\x18\x01\x20\x01(\rR\x02Id\
    \x123\n\x07Session\x18\x02\x20\x01(\x0b2\x19.message.core.UuidMessageR\
    \x07Session\x127\n\tCharacter\x18\x03\x20\x01(\x0b2\x19.message.core.Uui\
    dMessageR\tCharacter\x128\n\x08Movement\x18\x04\x20\x01(\x0e2\x1a.messag\
    e.request.DirectionH\0R\x08Movement\x124\n\x06Facing\x18\x05\x20\x01(\
    \x0e2\x1a.message.request.DirectionH\0R\x06FacingB\r\n\x0bRequestData*{\
    \n\tDirection\x12\x08\n\x04None\x10\0\x12\t\n\x05North\x10\x01\x12\r\n\t\
    NorthEast\x10\x03\x12\x08\n\x04East\x10\x02\x12\r\n\tSouthEast\x10\x06\
    \x12\t\n\x05South\x10\x04\x12\r\n\tSouthWest\x10\x0c\x12\x08\n\x04West\
    \x10\x08\x12\r\n\tNorthWest\x10\tB\x02H\x01J\xb9\x06\n\x06\x12\x04\0\0\
    \x1b\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\
    \x18\n\t\n\x02\x03\0\x12\x03\x03\0\x1c\n\x08\n\x01\x08\x12\x03\x05\0\x1c\
    \n\t\n\x02\x08\t\x12\x03\x05\0\x1c\n\n\n\x02\x04\0\x12\x04\x07\0\x0f\x01\
    \n\n\n\x03\x04\0\x01\x12\x03\x07\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\
    \x08\x04\x12\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x08\x04\x07\x11\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03\x08\x0b\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\x10\x11\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\t\x04!\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\t\
    \x04\x08\x12\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\t\x04\x14\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\t\x15\x1c\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\t\x1f\x20\n\x0b\n\x04\x04\0\x02\x02\x12\x03\n\x04#\n\r\n\x05\x04\0\
    \x02\x02\x04\x12\x04\n\x04\t!\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\n\
    \x04\x14\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\n\x15\x1e\n\x0c\n\x05\x04\
    \0\x02\x02\x03\x12\x03\n!\"\n\x0c\n\x04\x04\0\x08\0\x12\x04\x0b\x04\x0e\
    \x05\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x0b\n\x15\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\x0c\x08\x1f\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\x0c\x08\
    \x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0c\x12\x1a\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x0c\x1d\x1e\n\x0b\n\x04\x04\0\x02\x04\x12\x03\r\x08\
    \x1d\n\x0c\n\x05\x04\0\x02\x04\x06\x12\x03\r\x08\x11\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03\r\x12\x18\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\r\
    \x1b\x1c\n\n\n\x02\x05\0\x12\x04\x11\0\x1b\x01\n\n\n\x03\x05\0\x01\x12\
    \x03\x11\x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\x03\x12\x04\x10\n\x0c\n\x05\
    \x05\0\x02\0\x01\x12\x03\x12\x04\x08\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\
    \x12\x0b\x0f\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x13\x04\x11\n\x0c\n\x05\
    \x05\0\x02\x01\x01\x12\x03\x13\x04\t\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03\x13\x0c\x10\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x14\x04\x15\n\x0c\n\
    \x05\x05\0\x02\x02\x01\x12\x03\x14\x04\r\n\x0c\n\x05\x05\0\x02\x02\x02\
    \x12\x03\x14\x10\x14\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x15\x04\x10\n\x0c\
    \n\x05\x05\0\x02\x03\x01\x12\x03\x15\x04\x08\n\x0c\n\x05\x05\0\x02\x03\
    \x02\x12\x03\x15\x0b\x0f\n\x0b\n\x04\x05\0\x02\x04\x12\x03\x16\x04\x15\n\
    \x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x16\x04\r\n\x0c\n\x05\x05\0\x02\x04\
    \x02\x12\x03\x16\x10\x14\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x17\x04\x11\n\
    \x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x17\x04\t\n\x0c\n\x05\x05\0\x02\x05\
    \x02\x12\x03\x17\x0c\x10\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x18\x04\x15\n\
    \x0c\n\x05\x05\0\x02\x06\x01\x12\x03\x18\x04\r\n\x0c\n\x05\x05\0\x02\x06\
    \x02\x12\x03\x18\x10\x14\n\x0b\n\x04\x05\0\x02\x07\x12\x03\x19\x04\x10\n\
    \x0c\n\x05\x05\0\x02\x07\x01\x12\x03\x19\x04\x08\n\x0c\n\x05\x05\0\x02\
    \x07\x02\x12\x03\x19\x0b\x0f\n\x0b\n\x04\x05\0\x02\x08\x12\x03\x1a\x04\
    \x15\n\x0c\n\x05\x05\0\x02\x08\x01\x12\x03\x1a\x04\r\n\x0c\n\x05\x05\0\
    \x02\x08\x02\x12\x03\x1a\x10\x14b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
