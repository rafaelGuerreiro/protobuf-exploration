// This file is generated by rust-protobuf 2.5.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct UuidMessage {
    // message fields
    pub v1: u64,
    pub v2: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UuidMessage {
    fn default() -> &'a UuidMessage {
        <UuidMessage as ::protobuf::Message>::default_instance()
    }
}

impl UuidMessage {
    pub fn new() -> UuidMessage {
        ::std::default::Default::default()
    }

    // uint64 v1 = 1;


    pub fn get_v1(&self) -> u64 {
        self.v1
    }
    pub fn clear_v1(&mut self) {
        self.v1 = 0;
    }

    // Param is passed by value, moved
    pub fn set_v1(&mut self, v: u64) {
        self.v1 = v;
    }

    // uint64 v2 = 2;


    pub fn get_v2(&self) -> u64 {
        self.v2
    }
    pub fn clear_v2(&mut self) {
        self.v2 = 0;
    }

    // Param is passed by value, moved
    pub fn set_v2(&mut self, v: u64) {
        self.v2 = v;
    }
}

impl ::protobuf::Message for UuidMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.v1 = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.v2 = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.v1 != 0 {
            my_size += ::protobuf::rt::value_size(1, self.v1, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.v2 != 0 {
            my_size += ::protobuf::rt::value_size(2, self.v2, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.v1 != 0 {
            os.write_uint64(1, self.v1)?;
        }
        if self.v2 != 0 {
            os.write_uint64(2, self.v2)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UuidMessage {
        UuidMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "v1",
                    |m: &UuidMessage| { &m.v1 },
                    |m: &mut UuidMessage| { &mut m.v1 },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "v2",
                    |m: &UuidMessage| { &m.v2 },
                    |m: &mut UuidMessage| { &mut m.v2 },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UuidMessage>(
                    "UuidMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UuidMessage {
        static mut instance: ::protobuf::lazy::Lazy<UuidMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UuidMessage,
        };
        unsafe {
            instance.get(UuidMessage::new)
        }
    }
}

impl ::protobuf::Clear for UuidMessage {
    fn clear(&mut self) {
        self.v1 = 0;
        self.v2 = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UuidMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UuidMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12message/core.proto\x12\x0cmessage.core\"-\n\x0bUuidMessage\x12\x0e\
    \n\x02v1\x18\x01\x20\x01(\x04R\x02v1\x12\x0e\n\x02v2\x18\x02\x20\x01(\
    \x04R\x02v2B\x02H\x01J\xd5\x01\n\x06\x12\x04\0\0\x08\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x01\0\x15\n\x08\n\x01\x08\x12\
    \x03\x03\0\x1c\n\t\n\x02\x08\t\x12\x03\x03\0\x1c\n\n\n\x02\x04\0\x12\x04\
    \x05\0\x08\x01\n\n\n\x03\x04\0\x01\x12\x03\x05\x08\x13\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x06\x04\x12\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x06\x04\x05\
    \x15\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x06\x04\n\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x06\x0b\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x06\x10\x11\
    \n\x0b\n\x04\x04\0\x02\x01\x12\x03\x07\x04\x12\n\r\n\x05\x04\0\x02\x01\
    \x04\x12\x04\x07\x04\x06\x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x07\
    \x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x07\x0b\r\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x07\x10\x11b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
